
(module test)

(export
 test-all
 test-case
 test-if
 test-try
 test-def
 test-defm
 )

(import lists
	map reverse)

(import scompile
	transform
	transform_each
	lineno
	curmod
	)

(import serl
	erl-ast-of)

#(export-from (macros etc tag) (specials foo))

# (defm deftest (:all Name Forms):
#   `(def ,Name ():
#      (let Rs (cat [;Forms]):
# 	  (io\nl)
# 	  (let {Ys Ns} (lists\partition
# 			(fn (R) (case R
# 				  ({_ ok} true)
# 				  ({_ failed} false)))
# 			Rs):
# 	       (fmt "========================")
# 	       (fmt "~p\n" [Ns])
# 	       (fmt "Succeeded: ~B\nFailed: ~B\n" [(length Ys) (length Ns)])
# 	       ))))

(defm deftest (:all Name Forms):
  `(def ,Name ():
     (let Rs (cat [;Forms]):
	  (io\nl)
	  Rs)))

(defm assert (:all Es):
  `(assert-equal ;(lsc E Es:
		       `(true ,E))))

(defm assert-equal (:all Es):
  `[;(lsc `(,V ;Body) Es:
	  (let L (integer (ast-line V))
	       Body `(do ;Body)
	       :
	       `{,L
		 (try (case ,Body
			(,V (fmt "."))
			(R (fmt "X\n~p:Expected ~p, got ~p\n"
				[,L ,V R])
			   ## `(... ',E ...) is broken
			   (printer\p (%a{__quote} ,Body))
			   failed))
		      :catch
		      (Class Exception:
			     (fmt "X\n~p:Exception ~p\\~p\n" [,L Class Exception])
			     (printer\p (%a{__quote} ,Body))
			     failed))})
	  )])

(defm assert-error (:all Forms):
  `[;(lsc `(;Es) Forms:
	  (let* {Heads [(block Body)]} (upto-block Es)
		L (integer (ast-line (hd Heads))):
		`(try (begin ;Body) 
		      (fmt "X\n~p:Expected to fail." [,L])
		      {,L failed}
		  :catch
		   (;Heads: (fmt ".")
			    {,L ok})
		   (C R: (fmt "X\n~p:Unexpected failure: ~p\\~p" [,L C R])
		      {,L failed}))
		)
	  )])


# (deftest test-foo
#   :up do something
#   :down do something else
#   :assert
#   (== (foo) (bar))
  
#   :assert-not
#   :assert-error
#     )

(deftest test-all
  (test-if)
  (test-case)
  (test-try)
  (test-def)
  (test-defm)
  )

(deftest test-if
    (assert-equal
     (1 (if true 1 2))
     (2 (if false 1 2))
     (3 (if false 1 false 2 3))) 
  (assert-error
   (error if_clause: (if false 1)))
  )

(deftest test-case
    (assert-equal
     (1 (case a (a 1) (b 2)))
     (b (case 1
	  (A:(is_atom A): a)
	  (A:(is_integer A): b)))
     (1 (case 1
	  (A:(is_atom A):(is_integer A): A)))
     )
  (assert-error
   (error {case_clause _}: (case 1 (a a) (b b)))))

(deftest test-try
    (assert-equal
     (c (try a b c))
     (3 (try a b c :of (a 1) (b 2) (c 3)))
     (ok (try (throw foo) :catch (foo ok)))
     (oops (try (+ 1 a) :catch (error badarith: oops)))
     ({oops ok}
      {(try (put test-try not-ok) (+ 1 a)
	    :catch (error badarith: oops)
	    :after (put test-try ok))
       (get test-try)})
     ({2 foo} (try (throw foo)
		   :catch
		   (R:(is-integer R): {1 R})
		   (R:(is-atom R): {2 R})
		   ))
     ({1 1} (try (throw 1)
		   :catch
		   (R:(is-integer R): {1 R})
		   (R:(is-atom R): {2 R})
		   ))
     ) 
  (assert-error
   (error badarith: (try (+ 1 a) :catch (error foo: oops))))
    )


(def fa (A B): {A B})
(def fb (A :opt (B {A}) (C [B])):
  {A B C})
(def fc ():eval: '{fc})
(defm fcm (): (fc))
(def fd (A :opt B C):
  {A B C})

(deftest test-def
    (assert-equal
     ({a b} (fa a b))
     ({a {a} [{a}]} (fb a))
     ({a b [b]} (fb a b))
     ({a b c} (fb a b c))
     ({a false false} (fd a))
     ({a b false} (fd a b))
     ({a b c} (fd a b c))
     ({fc} (fcm))
     ))


(defm ma (A B): `{,A ,B})
(defm mb (A B :etc C D): `{,A ,B {,C ;D}})
(defm mc (A B :etc C D :etc E): `{,A ,B {,C ;D} {;E}})
(defm md (:tag a A :tag b (B ['no-b]) :etc C):
  `{{a-tag ;A}
    {b-tag ;B}
    ;C})
(defm me (:tag a A):
  `{;A})

# (defm mac-all (:all A B):
#   `{{a ,A} ;B})


(deftest test-defm
    (assert-equal
     ({a b} (ma a b))
     ({a b {c}} (mb a b: c))
     ({a b {c d e}} (mb a b: c d e))
     ({a b {c d e} {e f g}} (mc a b: c d e: e f g))
     ({{a-tag 1 2 3} {b-tag a b c} x y z}
      (md :a 1 2 3 :b a b c :x y z))
     ({{a-tag 1 2 3} {b-tag no-b} x y z}
      (md :a 1 2 3 :x y z))
     ({{a-tag} {b-tag a b c} x y z}
      (md :b a b c :x y z))
     ({{a-tag} {b-tag no-b} x y z}
      (md :x y z)) 
     ({{a-tag} {b-tag no-b}}
      (md:))
     ({} (me))
     ({b c} (me :a b c))
     )
  
#   (assert-error
#    ({a b} (ma a))
#    )
  
  )

